{"version":3,"file":"netlify-plugin-cache-nextjs.esm.js","sources":["../src/index.ts"],"sourcesContent":["import {existsSync} from 'fs';\nimport {join as joinPaths} from 'path';\n\ninterface NetlifyUtils {\n\tcache: {\n\t\trestore: (path: string, options?: Partial<{cwd: string}>) => Promise<boolean>;\n\t\tsave: (path: string, options?: Partial<{digests: string[]; cwd: string; ttl: number}>) => Promise<boolean>;\n\t};\n}\n\ninterface NetlifyInputs {\n\t// The TOML config uses snakecase for readability and because it's convention\n\tcustom_build_dir_name: string;\n\tbuild_dir_path: string;\n}\n\ninterface NetlifyOpts {\n\tutils: NetlifyUtils;\n\tnetlifyConfig: {build: {base: string}};\n\tinputs: NetlifyInputs;\n}\n\nfunction generateAbsolutePaths(\n\toptions: Pick<NetlifyOpts, 'inputs'>\n): {\n\tabsolute: {\n\t\t/** The absolute path to the build folder for Next.js. */\n\t\tbuildDir: string;\n\t\t/** The absolute path to the build manifest Next.js uses. */\n\t\tmanifest: string;\n\t};\n\t/** The name of the build directory. */\n\tbuildDirName: string;\n} {\n\t/** The name of the build folder. `.next`, unless specially configured. */\n\tconst buildDirName = options.inputs.custom_build_dir_name;\n\t/** The directory the build folder is in. Defaults to current directory, although some larger repositories might keep this in a `frontend` folder. */\n\tconst buildDirPathFromProject = options.inputs.build_dir_path;\n\n\t/** The absolute path to the build folder for Next.js. */\n\tconst absoluteBuildDirPath = joinPaths(buildDirPathFromProject, buildDirName, 'cache');\n\t/** The absolute path to the build manifest Next.js uses. */\n\t// I don't actually know if this build manifest has any relation to the cache folder\n\tconst manifestPath = joinPaths(absoluteBuildDirPath, '..', 'build-manifest.json');\n\n\treturn {\n\t\tabsolute: {\n\t\t\tbuildDir: absoluteBuildDirPath,\n\t\t\tmanifest: manifestPath\n\t\t},\n\t\tbuildDirName\n\t};\n}\n\nmodule.exports = {\n\t// Restore file/directory cached in previous builds.\n\t// Does not do anything if:\n\t//  - the file/directory already exists locally\n\t//  - the file/directory has not been cached yet\n\tasync onPreBuild({utils, inputs}: NetlifyOpts) {\n\t\tconst paths = generateAbsolutePaths({inputs});\n\t\tconst success = await utils.cache.restore(paths.absolute.buildDir);\n\n\t\tconsole.log(`${paths.absolute.buildDir} ${existsSync(paths.absolute.buildDir) ? 'exists' : 'does not exist'} on disk`);\n\n\t\tif (success) {\n\t\t\tconsole.log(`Restored the cached ${paths.buildDirName} folder at the location \\`${paths.absolute.buildDir}\\``);\n\t\t} else {\n\t\t\tconsole.log(`Couldn't restore the cache for the ${paths.buildDirName} folder at the location \\`${paths.absolute.buildDir}\\``);\n\t\t}\n\t},\n\t// Cache file/directory for future builds.\n\t// Does not do anything if:\n\t//  - the file/directory does not exist locally\n\t//  - the file/directory is already cached and its contents has not changed\n\t//    If this is a directory, this includes children's contents\n\t// Note that this will cache after the build, even if it fails, which fcould be unwanted behavior\n\tasync onPostBuild({utils, inputs}: NetlifyOpts) {\n\t\tconst paths = generateAbsolutePaths({inputs});\n\n\t\tconsole.log(`${paths.absolute.buildDir} ${existsSync(paths.absolute.buildDir) ? 'exists' : 'does not exist'} on disk`);\n\n\t\tconst success = await utils.cache.save(paths.absolute.buildDir, {\n\t\t\tdigests: [paths.absolute.manifest]\n\t\t});\n\n\t\tif (success) {\n\t\t\tconsole.log(`Cached the ${paths.buildDirName} folder at the location \\`${paths.absolute.buildDir}\\``);\n\t\t} else {\n\t\t\tconsole.log(`Couldn't cache the ${paths.buildDirName} folder at the location \\`${paths.absolute.buildDir}\\``);\n\t\t}\n\t}\n};\n"],"names":["generateAbsolutePaths","options","buildDirName","inputs","custom_build_dir_name","buildDirPathFromProject","build_dir_path","absoluteBuildDirPath","joinPaths","manifestPath","absolute","buildDir","manifest","module","exports","onPreBuild","utils","paths","cache","restore","success","console","log","existsSync","onPostBuild","save","digests"],"mappings":";;;AAsBA,SAASA,qBAAT,CACCC,OADD;AAYC;AACA,MAAMC,YAAY,GAAGD,OAAO,CAACE,MAAR,CAAeC,qBAApC;AACA;;AACA,MAAMC,uBAAuB,GAAGJ,OAAO,CAACE,MAAR,CAAeG,cAA/C;AAEA;;AACA,MAAMC,oBAAoB,GAAGC,IAAS,CAACH,uBAAD,EAA0BH,YAA1B,EAAwC,OAAxC,CAAtC;AACA;AACA;;AACA,MAAMO,YAAY,GAAGD,IAAS,CAACD,oBAAD,EAAuB,IAAvB,EAA6B,qBAA7B,CAA9B;AAEA,SAAO;AACNG,IAAAA,QAAQ,EAAE;AACTC,MAAAA,QAAQ,EAAEJ,oBADD;AAETK,MAAAA,QAAQ,EAAEH;AAFD,KADJ;AAKNP,IAAAA,YAAY,EAAZA;AALM,GAAP;AAOA;;AAEDW,MAAM,CAACC,OAAP,GAAiB;AAChB;AACA;AACA;AACA;AACMC,EAAAA,UALU;AAAA,QAKEC,KALF,QAKEA,KALF;AAAA,QAKSb,MALT,QAKSA,MALT;;AAAA;AAMf,UAAMc,KAAK,GAAGjB,qBAAqB,CAAC;AAACG,QAAAA,MAAM,EAANA;AAAD,OAAD,CAAnC;6BACsBa,KAAK,CAACE,KAAN,CAAYC,OAAZ,CAAoBF,KAAK,CAACP,QAAN,CAAeC,QAAnC,kBAAhBS;AAENC,QAAAA,OAAO,CAACC,GAAR,CAAeL,KAAK,CAACP,QAAN,CAAeC,QAA9B,UAA0CY,UAAU,CAACN,KAAK,CAACP,QAAN,CAAeC,QAAhB,CAAV,GAAsC,QAAtC,GAAiD,gBAA3F;;YAEIS;AACHC,UAAAA,OAAO,CAACC,GAAR,0BAAmCL,KAAK,CAACf,YAAzC,iCAAkFe,KAAK,CAACP,QAAN,CAAeC,QAAjG;;AAEAU,UAAAA,OAAO,CAACC,GAAR,yCAAkDL,KAAK,CAACf,YAAxD,iCAAiGe,KAAK,CAACP,QAAN,CAAeC,QAAhH;;;AAED,KAhBe;AAAA;AAAA;AAAA;AAiBhB;AACA;AACA;AACA;AACA;AACA;AACMa,EAAAA,WAvBU;AAAA,QAuBGR,KAvBH,SAuBGA,KAvBH;AAAA,QAuBUb,MAvBV,SAuBUA,MAvBV;;AAAA;AAwBf,UAAMc,KAAK,GAAGjB,qBAAqB,CAAC;AAACG,QAAAA,MAAM,EAANA;AAAD,OAAD,CAAnC;AAEAkB,MAAAA,OAAO,CAACC,GAAR,CAAeL,KAAK,CAACP,QAAN,CAAeC,QAA9B,UAA0CY,UAAU,CAACN,KAAK,CAACP,QAAN,CAAeC,QAAhB,CAAV,GAAsC,QAAtC,GAAiD,gBAA3F;6BAEsBK,KAAK,CAACE,KAAN,CAAYO,IAAZ,CAAiBR,KAAK,CAACP,QAAN,CAAeC,QAAhC,EAA0C;AAC/De,QAAAA,OAAO,EAAE,CAACT,KAAK,CAACP,QAAN,CAAeE,QAAhB;AADsD,OAA1C,kBAAhBQ;YAIFA;AACHC,UAAAA,OAAO,CAACC,GAAR,iBAA0BL,KAAK,CAACf,YAAhC,iCAAyEe,KAAK,CAACP,QAAN,CAAeC,QAAxF;;AAEAU,UAAAA,OAAO,CAACC,GAAR,yBAAkCL,KAAK,CAACf,YAAxC,iCAAiFe,KAAK,CAACP,QAAN,CAAeC,QAAhG;;;AAED,KArCe;AAAA;AAAA;AAAA;AAAA,CAAjB"}